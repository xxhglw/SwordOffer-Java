/**
 * 第06题
 * 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
 *
 * @author xxh
 * @date 2022/2/28
 */
 
 /**
  * 解法一：辅助栈
  * 时间复杂度是O(n)，空间复杂度是O(n)
  * 由于题目是返回数组，递归较复杂，借助了辅助栈
  */
  
  class Solution {
    public int[] reversePrint(ListNode head) {
        int n = 0;
        Stack<Integer> temp = new Stack<Integer>();
        while(head != null){
            temp.push(head.val);
            head = head.next;
            n++;
        }
        int[] res = new int[n];
        n = 0;
        while(!temp.isEmpty()){
            res[n] = temp.pop();
            n++;
        }
        return res;
    }
}


 /**
  * 解法二：遍历，利用简单数学
  
  * 时间复杂度是O(n)，空间复杂度是O(n)
  * 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
    内存消耗：41.8 MB, 在所有 Java 提交中击败了26.62%的用户
    通过测试用例：24 / 24
    
  * 由于总归需要返回大小为n的数组并遍历两遍链表；
    直接先遍历一次链表求长度并创建返回数组，再遍历一次链表，将值放到数组的正确位置即可。
  *
  */
  
  class Solution {
    public int[] reversePrint(ListNode head) {
        int n = 1;
        if(head == null)
            return new int[0];
        ListNode p = head;
        while(p.next != null){
            p = p.next;
            n++;
        }
        int[] res = new int[n];
        for(int i = 0;i < n;i++){
            res[n-i-1] = head.val;
            head = head.next;
        }
        return res;
    }
}
